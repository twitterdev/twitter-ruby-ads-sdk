# Copyright (C) 2015 Twitter, Inc.

module TwitterAds

  # Generic container for API requests.
  class Request

    attr_reader :client, :method, :resource, :options

    HTTP_METHOD = {
      get:    Net::HTTP::Get,
      post:   Net::HTTP::Post,
      put:    Net::HTTP::Put,
      delete: Net::HTTP::Delete
    }

    DEFAULT_DOMAIN = 'https://ads-api.twitter.com'

    private_constant :DEFAULT_DOMAIN, :HTTP_METHOD

    # Creates a new Request object instance.
    #
    # @example
    #   request = Request.new(@client, :get, '/0/accounts')
    #
    # @param client [Client] The Client object instance.
    # @param method [Symbol] The HTTP method to be used.
    # @param resource [String] The resource path for the request.
    # @param opts [Hash] An optional Hash of extended options.
    #
    # @since 0.1.0
    #
    # @return [Request] The Request object instance.
    def initialize(client, method, resource, opts = {})
      @client       = client
      @method       = method
      @resource     = resource
      @options      = opts
      @sandbox_mode = @client.options.fetch(:sandbox, false)
      enable_logger = @client.options.fetch(:enable_logger, false)
      @logger       = Logger.new(STDOUT) if @sandbox_mode || enable_logger
      self
    end

    # Executes the current Request object.
    #
    # @example
    #   request = Request.new(client, :get, '/0/accounts').perform
    #
    # @since  1.0.0
    #
    # @return [Response] The Response object instance generated by the Request.
    def perform
      response = oauth_request
      raise TwitterAds::Error.from_response(response) unless response.code < 400
      response
    end

    private

    def oauth_request
      request  = http_request
      default_domain = @sandbox_mode ? SANDBOX_DOMAIN : DEFAULT_DOMAIN
      domain   = @options.fetch(:domain, default_domain)
      consumer = OAuth::Consumer.new(@client.consumer_key, @client.consumer_secret, site: domain)
      token    = OAuth::AccessToken.new(consumer, @client.access_token, @client.access_token_secret)
      request_url = "#{domain}#{request.path}"
      @logger.info "[Twitter Ads API Request] (#{request.method}) #{request_url}" if @logger
      request.oauth!(consumer.http, consumer, token)
      response = consumer.http.request(request)
      tw_response = Response.new(response.code, response.each {}, response.body)
      if tw_response.body.key?(:errors)
        response_data = tw_response.body[:errors].first[:message]
      else
        response_data = tw_response.body[:data]
      end
      @logger.info "[Twitter Ads API Response] (#{tw_response.code}) #{response_data}" if @logger
      tw_response
    end

    def http_request
      request_url  = @resource
      request_url += "?#{URI.encode_www_form(@options[:params])}" if @options[:params]
      request      = HTTP_METHOD[@method].new(request_url)
      request.body = @options[:body] if @options[:body]

      @options[:headers].each { |header, value| request[header] = value } if @options[:headers]
      request['user-agent'] = user_agent

      request
    end

    def user_agent
      "twitter-ads version: #{TwitterAds::VERSION} " \
      "platform: #{RUBY_ENGINE} #{RUBY_VERSION} (#{RUBY_PLATFORM})"
    end

  end

end
